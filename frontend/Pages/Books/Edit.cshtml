@page
@using System.Globalization;
@model Pages.Books.EditModel
@{
    ViewData["Title"] = "Editar livro";
}

<h2>Editar livro</h2>

@if (ModelState.ContainsKey("Error"))
{
    <div class="text-danger">
        @foreach (var error in ModelState["Error"].Errors)
        {
            <p>@error.ErrorMessage</p>
        }
    </div>
}

<form method="post">
    <div class="mb-3">
        <label for="Title" class="form-label">Título</label>
        <input type="text" class="form-control" id="Title" name="Title" value="@Model.Book.Title" required />
        @if (ModelState.ContainsKey("Title"))
        {
            <div class="text-danger">
                @foreach (var error in ModelState["Title"].Errors)
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Isbn" class="form-label">ISBN</label>
        <input type="text" class="form-control" id="Isbn" name="Isbn" value="@Model.Book.Isbn" required />
        @if (ModelState.ContainsKey("ISBN"))
        {
            <div class="text-danger">
                @foreach (var error in ModelState["ISBN"].Errors)
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Category" class="form-label">Categoria</label>
        <input type="text" class="form-control" id="Category" name="Category" value="@Model.Book.Category" required />
        @if (ModelState.ContainsKey("Category"))
        {
            <div class="text-danger">
                @foreach (var error in ModelState["Category"].Errors)
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Price" class="form-label">Preço</label>
        <input type="text" step="0.01" class="form-control" id="Price" name="Price" value="@Model.Book.Price"
            required />
        @if (ModelState.ContainsKey("Price"))
        {
            <div class="text-danger">
                @foreach (var error in ModelState["Price"].Errors)
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="StockQuantity" class="form-label">Estoque</label>
        <input type="number" class="form-control" id="StockQuantity" name="StockQuantity"
            value="@Model.Book.StockQuantity" required />
        @if (ModelState.ContainsKey("StockQuantity"))
        {
            <div class="text-danger">
                @foreach (var error in ModelState["StockQuantity"].Errors)
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Authors" class="form-label">Autores</label>
        <div id="authors-list">
            @for (int i = 0; i < Model.Book.Authors.Count; i++)
            {
                <div class="input-group mb-2">
                    <input type="text" class="form-control author-input" name="Book.Authors[@i]"
                        value="@Model.Book.Authors[i]" placeholder="Autor" />
                    <button type="button" class="btn btn-danger remove-author">Remover</button>
                </div>
            }
        </div>
        <button type="button" id="add-author" class="btn btn-sm btn-primary">Adicionar Autor</button>
        @if (ModelState.ContainsKey("Authors"))
        {
            <div class="text-danger">
                @foreach (var error in ModelState["Authors"].Errors)
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>

    <input type="hidden" id="Authors" name="Authors" />
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-success mb-3">Salvar</button>
    </div>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const authorsList = document.getElementById("authors-list");
        const addAuthorButton = document.getElementById("add-author");
        const authorsInput = document.getElementById("Authors");
        const authors = @Html.Raw(Json.Serialize(Model.Book.Authors));

        addAuthorButton.addEventListener("click", function () {
            const newAuthorGroup = document.createElement("div");
            newAuthorGroup.className = "input-group mb-2";
            newAuthorGroup.innerHTML = `
                <input type="text" class="form-control author-input" placeholder="Autor" />
                <button type="button" class="btn btn-danger remove-author">Remover</button>
            `;
            authorsList.appendChild(newAuthorGroup);
        });

        authorsList.addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("remove-author")) {
                e.target.parentElement.remove();
            }
        });

        document.getElementById('Price').addEventListener('input', function (event) {
            let value = event.target.value;

            // Regex para permitir apenas números com até 2 casas decimais
            const regex = /^\d*\.?\d{0,2}$/;

            if (!regex.test(value)) {
                // Se o valor não corresponder ao regex, remover o último caractere
                event.target.value = value.slice(0, -1);
            }
        });

        document.querySelector("form").addEventListener("submit", function () {
            const authors = Array.from(authorsList.querySelectorAll(".author-input"))
                .map(input => input.value)
                .filter(value => value.trim() !== "");
            authorsInput.value = JSON.stringify(authors);

            const priceInput = document.getElementById("Price");
            priceInput.value = parseFloat(priceInput.value).toFixed(2).replace('.', ',');
        });
    });
</script>